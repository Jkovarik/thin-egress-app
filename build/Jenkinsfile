pipeline {

  // Environment Setup
  environment {
    AWS_DEFAULT_REGION="us-east-1"
    AWSENV=""
    APPTAG="teadev"
    BUILDTAG="${APPTAG}-${NEWTAG}"
    CODE_ARCHIVE_FILENAME="${APPTAG}-code-${NEWTAG}.zip"
    CF_TEMPLATE_FILENAME="${APPTAG}-cloudformation-${NEWTAG}.yaml"
    CODE_BUCKET="asf.rain.code"
    CODE_PUBLIC_BUCKETNAME="asf.public.code"
    CODE_DIR="thin-egress-app"

  }

  // Build on a slave with nodejs
  agent { label 'docker' }

  stages {

    // just sort of asess the enviroment
    stage('Setup Env') {
      steps {
        // Send chat notification
        mattermostSend channel: 'rain', color: '#EAEA5C', endpoint: 'https://chat.asf.alaska.edu/hooks/dm8kzc8rxpr57xkt9w6tnfaasr', message: "Build started: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>). See (<{$env.RUN_CHANGES_DISPLAY_URL}|Changes>)."
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]]) {
          // Dump ENV
          sh 'tree'
          sh 'pwd'
          sh 'env'
        }
        // Update submodules. 
        sh "echo '>> Updating submodules....'"
        sh "git config user.email 'jenkins@jenkins.asf.alaska.edu'"
        sh "git config user.name 'jenkins'"
        sh "git submodule update --init --recursive"
      }
    }

    // Check that our cumulus is fresh!
    stage('Package Dependancies') {
      steps {
      
        // Create a working space, pull in dependancies
        sh "echo '>> Gathering Dependencies....'"
        sh "rm -rf pkg && mkdir pkg"
        sh "cd pkg && pip3 install -r ${WORKSPACE}/lambda/requirements.txt --system --target ."
        
        // Remove unwanted pieces
        sh "echo '>> Removing Unwanted....'"
        sh "cd ${WORKSPACE}/pkg && rm -rf *.dist-info pip docutils chalice/cli botocore setuptools tests easy_install.py "
        
        // Zip up the upload.
        sh "echo '>> Building Zipfile....'"
        sh """ cd ${WORKSPACE}/pkg && \
               zip -r9 ../${CODE_ARCHIVE_FILENAME} ./* && \
               cd ../lambda  && \
               zip -g ../${CODE_ARCHIVE_FILENAME} ./app.py && \
               zip -g -r ../${CODE_ARCHIVE_FILENAME} ./common && \
               zip -g -r ../${CODE_ARCHIVE_FILENAME} ./templates """
        
        // Swap in BUILD#
        sh "echo '>> Build Stamping....'"
        sh 'sed -i -e "s/<BUILD_ID>/${NEWTAG}/" ./cloudformation/thin-egress-app.yaml'
        sh 'sed -i -e "s/^Description:.*/Description: \\"TEA deployed by Jenkins job ${JOB_NAME}, currently at ${NEWTAG}\\"/" ./cloudformation/thin-egress-app.yaml'

      }
   }
   
   stage('Push to AWS') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWSCREDS}"]])  {
          // Push the code up to private bucket 
          sh "echo '>> Pushing code to ASF Bucket'"
          sh "aws s3 cp ./${CODE_ARCHIVE_FILENAME} s3://${CODE_BUCKET}/${CODE_DIR}/"
          sh "aws s3 cp ./cloudformation/thin-egress-app.yaml s3://${CODE_BUCKET}/${CODE_DIR}/${CF_TEMPLATE_FILENAME}"
          
          // Push out the CF Stack
          sh "echo '>> Deploying the CF stack'"
          sh """ aws cloudformation deploy --profile=jenkins --region=us-east-1 \
                     --stack-name ${APPTAG}-stack \
                     --template-file cloudformation/thin-egress-app.yaml \
                     --capabilities CAPABILITY_NAMED_IAM \
                     --parameter-overrides \
                       URSAuthCredsSecretName=EgressAppURSCreds-prod \
                       ConfigBucket=rain-t-config \
                       PermissionsBoundaryName= \
                       BucketMapFile=bucket_map.yaml \
                       BucketnamePrefix=t- \
                       DownloadRoleArn= \
                       HtmlTemplateDir= \
                       SessionStore=S3 \
                       StageName=DEV \
                       Loglevel=DEBUG \
                       UseReverseBucketMap="True" """
        }
      }
    } 
    
    
    stage('Tag Build'){
      steps {
        // Use existing creds
        sh("git config user.email 'jenkins@jenkins.asf.alaska.edu'")
        sh("git config user.name 'jenkins'")

        // tags current changeset
        sh "echo '>> Creating Build Tag'"
        sh ("git tag -a ${BUILDTAG} -m \"versioning ${BUILDTAG}\"")

        // pushes the tags
        sh "echo '>> Pushing Build Tag'"
        sh ("git push origin ${BUILDTAG}")
      }
    }    
    
    
  } // stages 
  
  post {
    success {
      mattermostSend channel: 'rain', color: '#CEEBD3', endpoint: 'https://chat.asf.alaska.edu/hooks/dm8kzc8rxpr57xkt9w6tnfaasr', message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
    failure {
      mattermostSend channel: 'rain', color: '#FFBDBD', endpoint: 'https://chat.asf.alaska.edu/hooks/dm8kzc8rxpr57xkt9w6tnfaasr', message: "Build Failed:  ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
  }
}